#!/bin/sh
#
# focus

ARGS="$@"

usage() {
    cat >&2 << EOF
Usage: $(basename $0) [-w wid] [-nph]
    -w | wid:   Focus window id.
    -n | next:  Focus the next window in stack.
    -p | prev:  Focus the previous window in stack.
    -h | help:  Show this help.
EOF

    test $# -eq 0 || exit $1
}

wid() {
    # check passed wid exists
    wattr "$1" && {
        wid="$1"
        focus
    }
}

next() {
    wid="$(lsw | grep -v "$PFW" | sed '1 p;d')"
    test ! -z "$wid" && focus
}

prev() {
    wid="$(lsw | grep -v "$PFW" | sed '$ p;d')"
    test ! -z "$wid" && focus
}

focus() {
    test "$wid" = "$PFW" && exit 1

    # be as responsive as possible to user input
    wtf "$wid"
    chwso -r "$wid"

    grep -qrw "$wid" "$fsdir" 2> /dev/null

    case $? in
        # no border when wid is found to be fullscreen
        0)
            chwb -s "$BW" -c "$INACTIVE" "$PFW"
            chwb -s 0 "$wid"
            ;;
        1)
            grep -qrw "$PFW" "$fsdir" && {
                # set border when focusing from a fullscreen wid
                chwb -s 0 "$PFW"
                chwb -s "$BW" -c "$ACTIVE" "$wid"
            } || {
                # normal focusing
                chwb -s "$BW" -c "$INACTIVE" "$PFW"
                chwb -s "$BW" -c "$ACTIVE" "$wid"
            }
            ;;
        *)
            # normal focusing
            chwb -s "$BW" -c "$INACTIVE" "$PFW"
            chwb -s "$BW" -c "$ACTIVE" "$wid"
            ;;
    esac

    # move mouse to middle of window
    wmp -a $(($(wattr x $wid) + $(wattr w $wid) / 2)) \
           $(($(wattr y $wid) + $(wattr h $wid) / 2))
}

main() {
    . fwmrc
    wmenv
    wmcolours

    case "$1" in
        -w|--wid|wid)   wid "$2" ;;
        -n|--next|next) next     ;;
        -p|--prev|prev) prev     ;;
        -h|--help|help) usage 0  ;;
        *)              usage 1  ;;
    esac
}

main $ARGS
