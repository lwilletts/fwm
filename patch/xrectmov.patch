diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..b6ce99d
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,8 @@
+LDLIBS = -lX11
+
+all: xrectsel xrectmov
+
+install: all
+	mkdir -p $(DESTDIR)$(PREFIX)/bin
+	cp xrectsel $(DESTDIR)$(PREFIX)/bin/xrectsel
+	cp xrectmov $(DESTDIR)$(PREFIX)/bin/xrectmov
diff --git a/xrectmov.c b/xrectmov.c
new file mode 100644
index 0000000..508a1cb
--- /dev/null
+++ b/xrectmov.c
@@ -0,0 +1,231 @@
+/* xrectsel.c -- print the geometry of a rectangular screen region.
+
+   Copyright (C) 2011-2014  lolilolicon <lolilolicon@gmail.com>
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdarg.h>
+#include <string.h>
+#include <X11/Xlib.h>
+#include <X11/cursorfont.h>
+
+#include "config.h"
+
+#define die(args...) do {error(args); exit(EXIT_FAILURE); } while(0)
+
+typedef struct Region Region;
+struct Region {
+  Window root;
+  int x; /* offset from left of screen */
+  int y; /* offset from top of screen */
+  int X; /* offset from right of screen */
+  int Y; /* offset from bottom of screen */
+  unsigned int w; /* width */
+  unsigned int h; /* height */
+  unsigned int b; /* border_width */
+  unsigned int d; /* depth */
+};
+
+typedef struct Coord Coord;
+struct Coord {
+  int x; /* offset from left of screen */
+  int y; /* offset from top of screen */
+  unsigned int w; /* width */
+  unsigned int h; /* height */
+};
+
+static void error(const char *errstr, ...);
+static int print_region_attr(const char *fmt, Region region);
+static int move_region(Display *dpy, Window root, Region *region, Coord coord);
+
+int main(int argc, const char *argv[])
+{
+  Display *dpy;
+  Window root;
+  Coord coord;
+  Region sr; /* selected region */
+  const char *fmt; /* format string */
+
+  if (argc < 5)
+    exit(1);
+
+  dpy = XOpenDisplay(NULL);
+  if (!dpy) {
+    die("failed to open display %s\n", getenv("DISPLAY"));
+  }
+
+  root = DefaultRootWindow(dpy);
+
+  fmt = "%x %y %w %h\n";
+
+  coord.x = atoi(argv[1]);
+  coord.y = atoi(argv[2]);
+  coord.w = atoi(argv[3]);
+  coord.h = atoi(argv[4]);
+
+  /* interactively select a rectangular region */
+  if (move_region(dpy, root, &sr, coord) != EXIT_SUCCESS) {
+    XCloseDisplay(dpy);
+    die("failed to select a rectangular region\n");
+  }
+
+  print_region_attr(fmt, sr);
+
+  XCloseDisplay(dpy);
+  return EXIT_SUCCESS;
+}
+
+static void error(const char *errstr, ...)
+{
+  va_list ap;
+
+  fprintf(stderr, "xrectsel: ");
+  va_start(ap, errstr);
+  vfprintf(stderr, errstr, ap);
+  va_end(ap);
+}
+
+static int print_region_attr(const char *fmt, Region region)
+{
+  const char *s;
+
+  for (s = fmt; *s; ++s) {
+    if (*s == '%') {
+      switch (*++s) {
+        case '%':
+          putchar('%');
+          break;
+        case 'x':
+          printf("%i", region.x);
+          break;
+        case 'y':
+          printf("%i", region.y);
+          break;
+        case 'X':
+          printf("%i", region.X);
+          break;
+        case 'Y':
+          printf("%i", region.Y);
+          break;
+        case 'w':
+          printf("%u", region.w);
+          break;
+        case 'h':
+          printf("%u", region.h);
+          break;
+        case 'b':
+          printf("%u", region.b);
+          break;
+        case 'd':
+          printf("%u", region.d);
+          break;
+      }
+    } else {
+      putchar(*s);
+    }
+  }
+
+  return 0;
+}
+
+static int move_region(Display *dpy, Window root, Region *region, Coord coord)
+{
+  XEvent ev;
+
+  GC sel_gc;
+  XGCValues sel_gv;
+
+  int status, done = 0, btn_pressed = 0;
+
+  Cursor cursor;
+  cursor = XCreateFontCursor(dpy, XC_tcross);
+
+  /* Grab pointer for these events */
+  status = XGrabPointer(dpy, root, True,
+               PointerMotionMask | ButtonPressMask | ButtonReleaseMask,
+               GrabModeAsync, GrabModeAsync, None, cursor, CurrentTime);
+
+  if (status != GrabSuccess) {
+      error("failed to grab pointer\n");
+      return EXIT_FAILURE;
+  }
+
+  sel_gv.function = GXinvert;
+  sel_gv.subwindow_mode = IncludeInferiors;
+  sel_gv.line_width = 1;
+  sel_gc = XCreateGC(dpy, root, GCFunction | GCSubwindowMode | GCLineWidth, &sel_gv);
+
+  for (;;) {
+    XNextEvent(dpy, &ev);
+    switch (ev.type) {
+      case ButtonPress:
+        btn_pressed = 1;
+        XDrawRectangle(dpy, root, sel_gc, coord.x, coord.y, coord.w, coord.h);
+        break;
+      case MotionNotify:
+        /* Draw only if button is pressed */
+        if (btn_pressed) {
+          /* Re-draw last Rectangle to clear it */
+          XDrawRectangle(dpy, root, sel_gc, coord.x, coord.y, coord.w, coord.h);
+
+          coord.x = ev.xbutton.x_root - coord.w/2;
+          coord.y = ev.xbutton.y_root - coord.h/2;
+
+          /* Draw Rectangle */
+          XDrawRectangle(dpy, root, sel_gc, coord.x, coord.y, coord.w, coord.h);
+          XFlush(dpy);
+        }
+        break;
+      case ButtonRelease:
+        done = 1;
+        break;
+      default:
+        break;
+    }
+    if (done)
+      break;
+  }
+
+  /* Re-draw last Rectangle to clear it */
+  XDrawRectangle(dpy, root, sel_gc, coord.x, coord.y, coord.w, coord.h);
+  XFlush(dpy);
+
+  XUngrabPointer(dpy, CurrentTime);
+  XFreeCursor(dpy, cursor);
+  XFreeGC(dpy, sel_gc);
+  XSync(dpy, 1);
+
+  Region rr; /* root region */
+  Region sr; /* selected region */
+
+  if (False == XGetGeometry(dpy, root, &rr.root, &rr.x, &rr.y, &rr.w, &rr.h, &rr.b, &rr.d)) {
+    error("failed to get root window geometry\n");
+    return EXIT_FAILURE;
+  }
+  sr.x = coord.x;
+  sr.y = coord.y;
+  sr.w = coord.w;
+  sr.h = coord.h;
+  /* calculate right and bottom offset */
+  sr.X = rr.w - sr.x - sr.w;
+  sr.Y = rr.h - sr.y - sr.h;
+  /* those doesn't really make sense but should be set */
+  sr.b = rr.b;
+  sr.d = rr.d;
+  *region = sr;
+  return EXIT_SUCCESS;
+}
diff --git a/xrectsel.c b/xrectsel.c
index e6cf2e6..338c3b5 100644
--- a/xrectsel.c
+++ b/xrectsel.c
@@ -16,7 +16,6 @@
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#include <config.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>
@@ -24,6 +23,8 @@
 #include <X11/Xlib.h>
 #include <X11/cursorfont.h>
 
+#include "config.h"
+
 #define die(args...) do {error(args); exit(EXIT_FAILURE); } while(0)
 
 typedef struct Region Region;
@@ -57,7 +58,7 @@ int main(int argc, const char *argv[])
 
   root = DefaultRootWindow(dpy);
 
-  fmt = argc > 1 ? argv[1] : "%wx%h+%x+%y\n";
+  fmt = argc > 1 ? argv[1] : "%x %y %w %h\n";
 
   /* interactively select a rectangular region */
   if (select_region(dpy, root, &sr) != EXIT_SUCCESS) {