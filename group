#!/bin/sh
# shellcheck disable=SC2015
#
# group

usage() {
    base="$(basename "$0")"

    cat >&2 << EOF
Usage:
    $ $base -a | --add [group] <wid>      : Add window to group.
    $ $base -f | --find [wid]             : Pass window to find its group.
    $ $base -c | --clean <wid>            : Clean window from current group.
    $ $base -m | --map [group]            : Map window to screen.
    $ $base -u | --unmap [group]          : Unmap window from screen.
    $ $base -t | --toggle [group] <focus> : Toggle window visibility.
    $ $base -r | --reset                  : Map all windows and reset groups.
    $ $base -l | --list                   : List current windows in groups.
    $ $base -h | --help                   : Show this help.
EOF
    test $# -eq 0 || exit "$1"
}

findWid() {
    wid="$1"

    # if wid is found in a group, return the group
    # might not function correctly if $groupdir is changed
    grep -rw "$wid" "$groupdir" | awk -F '[/:]' '{print $5}'
}

cleanWid() {
    test -n "$1" && wid="$1" || wid="$PFW"

    # test wid exists in a group
    foundGroups="$(findWid "$wid")"
    test -z "$foundGroups" && return 1

    # remove wid from group
    for group in $foundGroups; do
        sed -i -n '/'"$wid"'/!p' "$groupdir/$group"
        # remove group file if empty and perform cleanup
        test ! -s "$groupdir/$group" && {
            rm "$groupdir/$group"
            test -f "$activegrp" && sed -i -n '/'"$group"'/!p' "$activegrp"
            test -f "$inactivegrp" && sed -i -n '/'"$group"'/!p' "$inactivegrp"
        }
    done

    # map the wid to the screen
    mapw -m "$wid"
}

addWid() {
    intCheck "$1" && grp="$1" || usage 1
    test -n "$2" && wid="$2" || wid="$PFW"
    widCheck "$wid" || usage 1

    # test for no focused window
    test "$wid" = "0x00000000" && return 1

    # return if wid already exists in current group
    foundGroup="$(findWid "$wid")"
    test -n "$foundGroup" && test "$grp" -eq "$foundGroup" && return 0

    # removes wid from all groups before adding to a new one
    cleanWid "$wid"

    # hide wid if group is found to be hidden
    test -f "$inactivegrp" && {
        while read -r inactivegrpGroup; do
            test "$inactivegrpGroup" -eq "$grp" && mapw -u "$wid" && break
        done < "$inactivegrp"
    }

    # add group to activegrp if group does not exist and add wid to group
    test ! -f "$groupdir/$grp" && printf '%s\n' "$grp" >> "$activegrp"
    printf '%s\n' "$wid" >> "$groupdir/$grp"
}

mapGroup() {
    intCheck "$1" && grp="$1" || usage 1

    # only continue if group exists
    test -f "$groupdir/$grp" && {
        # return if group is already activegrp
        test -f "$activegrp" && grep -qw "$grp" "$activegrp" && return 1

        # add group to activegrp file
        printf '%s\n' "$grp" >> "$activegrp"

        # clean group from inactivegrp file
        test -f "$inactivegrp" && sed -i -n '/'"$grp"'/!p' "$inactivegrp"

        # show all windows in group and put them on top of the stack
        while read -r mapWid; do
            chwso -r "$mapWid"
            mapw -m "$mapWid"
        done < "$groupdir/$grp"

        # focus top wid in group
        test "$focus" != "false" && {
            while read -r wid; do
                test "$PFW" = "$wid" && {
                    focus --wid "$(head -n 1 "$groupdir/$grp")"
                    break
                }
            done < "$groupdir/$grp"
        }
    } || return 1
}

unmapGroup() {
    intCheck "$1" && grp="$1" || usage 1

    # only continue if group exists
    test -f "$groupdir/$grp" && {
        # return if group is already inactivegrp
        test -f "$inactivegrp" && grep -qw "$grp" "$inactivegrp" && return 1

        # add group to inactivegrp file
        printf '%s\n' "$grp" >> "$inactivegrp"

        # clean group from activegrp file
        test -f "$activegrp" && sed -i -n '/'"$grp"'/!p' "$activegrp"

        # hide all windows in group
        while read -r unmapWid; do
            mapw -u "$unmapWid"
        done < "$groupdir/$grp"

        # focus prev wid on screen
        test "$focus" != "false" && {
            while read -r wid; do
                test "$PFW" = "$wid" && {
                    focus --wid "$(lsw | tail -n 1)"
                    break
                }
            done < "$groupdir/$grp"
        }
    } || return 1
}

toggleGroup() {
    intCheck "$1" && grp="$1" || usage 1

    case "$2" in
        f|focus) focus=false ;;
    esac

    # only continue if activegrp file exists
    test -f "$activegrp" && {
        # unmap group if found activegrp
        while read -r activegrpGroup; do
            test "$activegrpGroup" -eq "$grp" && {
                toggle=true
                break
            }
        done < "$activegrp"
    }

    test "$toggle" != "true" && {
        mapGroup "$grp"
    }

    test "$toggle" = "true" && {
        unmapGroup "$grp"
    }
}

workspaceGroup() {
    # test if group exists
        # add all windows on current screen to group if no
        # toggle status if yes

    return 0
}

listGroups() {
    find "$groupdir"/? > "$groupdir/list"
    while read -r group; do
        printf '%s\n' "group $(printf '%s' "$group" | rev | cut -d'/' -f 1 | rev):"
        while read -r wid; do
            printf '%s\n' "$wid: $(name "$wid"),$(class "$wid")"
        done < "$group"
    done < "$groupdir/list"
    rm "$groupdir/list"
}

resetGroups() {
    # map all groups to the screen
    test -f "$inactivegrp" && {
        while read -r resetGroupNum; do
            mapGroup "$resetGroupNum"
        done < "$inactivegrp"
    }

    # clean the group directory
    rm -f "$groupdir"/*

    return 0
}

main() {
    . fwmrc
    wmenv
    wmgroup

    case "$1" in
        -a|--add|add)       addWid "$2" "$3"      ;;
        -m|--map|map)       mapGroup "$2"         ;;
        -l|--list|list)     listGroups            ;;
        -f|--find|find)     findWid "$2"          ;;
        -r|--reset|reset)   resetGroups           ;;
        -c|--clean|clean)   cleanWid "$2"         ;;
        -u|--unmap|unmap)   unmapGroup "$2"       ;;
        -t|--toggle|toggle) toggleGroup "$2" "$3" ;;
        -h|--help|help)     usage 0               ;;
        *)                  usage 1               ;;
    esac
}

main "$@"
